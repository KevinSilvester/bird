use crate::utils::errors::BirdError;
use dirs;
use std::path::PathBuf;
use super::Shell;

mod help_msgs {
   pub const EGGS_FILE: &str = "Path to eggs file.\n\
   The eggs file is where you should add the install/update/uninstall commands for you desired programs.\n\
   Default path '~/.bird/bird-eggs.json'\n\n";

   pub const NEST_FILE: &str = "Path to nest file.\n\
   The nest file is used to keep track programs installed using bird.\n\
   This file is autogenerated if the file does not already exist.\n\
   Default path '~/.bird/bird-nest.json'.\n\n";

   pub const SHELL: &str = "Shell bird uses to run install/update/unistall commands.\n\
   Default shell is the current running shell.\n\n";
}

#[derive(clap::Parser, Debug)]
pub struct BirdConfig {
   #[clap(
      long = "eggs",
      env = "BIRD_EGGS",
      global = true,
      hide_env_values = true,
      value_name = "FILE_PATH",
      long_help = help_msgs::EGGS_FILE
   )]
   pub eggs_file: Option<PathBuf>,

   #[clap(
      long = "nest",
      env = "BIRD_NEST",
      global = true,
      hide_env_values = true,
      value_name = "FILE_PATH",
      long_help = help_msgs::NEST_FILE,
      next_line_help = true
   )]
   pub nest_file: Option<PathBuf>,

   #[clap(
      long,
      env = "BIRD_SHELL",
      global = true,
      possible_values = Shell::possible_values(),
      hide_env_values = true,
      long_help = help_msgs::SHELL
   )]
   pub shell: Option<String>,
}

impl BirdConfig {
   fn default_eggs_file() -> String {
      match dirs::home_dir() {
         Some(dir) => {
            let mut d = dir.clone();
            d.push(".bird");
            d.push("bird-eggs.json");
            String::from(d.to_str().unwrap())
         }
         None => std::process::exit(1),
      }
   }

   fn default_nest_file() -> String {
      match dirs::home_dir() {
         Some(dir) => {
            let mut d = dir.clone();
            d.push(".bird");
            d.push("bird-nest.json");
            String::from(d.to_str().unwrap())
         }
         None => std::process::exit(1),
      }
   }

   pub fn eggs_file_path(&self) -> Result<String, BirdError> {
      match &self.eggs_file {
         Some(p) => Ok(p.to_str().unwrap().to_owned()),
         None => Ok(Self::default_eggs_file()),
      }
   }

   pub fn nest_file_path(&self) -> Result<String, BirdError> {
      match &self.nest_file {
         Some(p) => Ok(p.to_str().unwrap().to_owned()),
         None => Ok(Self::default_nest_file()),
      }
   }
}
