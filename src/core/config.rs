use crate::utils::errors::BirdError;
use dirs;
use std::path::PathBuf;

#[cfg(windows)]
mod shell_vars {
   pub const DEFAULT_SHELL: &str = "powershell";
   pub const AVAILABLE_SHELLS: &[&str; 6] = &["cmd", "powershell", "pwsh", "bash", "zsh", "fish"];
}

#[cfg(unix)]
mod shell_vars {
   pub const DEFAULT_SHELL: &str = "bash";
   pub const AVAILABLE_SHELLS: &[&str; 4] = &["bash", "zsh", "fish", "powershell"];
}

mod help_msgs {
   pub const EGGS_FILE: &str = r"Path to eggs file.
The eggs file is where you should add the install/update/uninstall commands for you desired programs.
Default path '~/.bird/bird-eggs.json'";

   pub const NEST_FILE: &str = r"Path to nest file.
The nest file is used to keep track programs installed using bird.
This file is autogenerated if the file does not already exist.
Default path '~/.bird/bird-nest.json'.";

   #[cfg(windows)]
   pub const SHELL: &str = r"Shell bird uses to run install/update/unistall commands.
Default shell 'powershell'.";

   #[cfg(unix)]
   pub const SHELL: &str = r"Shell bird uses to run install/update/unistall commands.
Default shell 'bash'.";
}

#[derive(clap::Parser, Debug)]
pub struct BirdConfig {
   #[clap(
      long = "eggs",
      env = "BIRD_EGGS",
      global = true,
      hide_env_values = true,
      value_name = "FILE_PATH",
      long_help = help_msgs::EGGS_FILE
   )]
   pub eggs_file: Option<PathBuf>,

   #[clap(
      long = "nest",
      env = "BIRD_NEST",
      global = true,
      hide_env_values = true,
      value_name = "FILE_PATH",
      long_help = help_msgs::NEST_FILE
   )]
   pub nest_file: Option<PathBuf>,

   #[clap(
      long,
      multiple_values = false,
      env = "BIRD_SHELL",
      global = true,
      default_value = shell_vars::DEFAULT_SHELL,
      possible_values = shell_vars::AVAILABLE_SHELLS,
      hide_env_values = true,
      long_help = help_msgs::SHELL
   )]
   pub shell: String,
}

impl BirdConfig {
   fn default_eggs_file() -> String {
      match dirs::home_dir() {
         Some(dir) => {
            let mut d = dir.clone();
            d.push(".bird");
            d.push("bird-eggs.json");
            String::from(d.to_str().unwrap())
         }
         None => std::process::exit(1),
      }
   }

   fn default_nest_file() -> String {
      match dirs::home_dir() {
         Some(dir) => {
            let mut d = dir.clone();
            d.push(".bird");
            d.push("bird-nest.json");
            String::from(d.to_str().unwrap())
         }
         None => std::process::exit(1),
      }
   }

   pub fn eggs_file_path(&self) -> Result<String, BirdError> {
      match &self.eggs_file {
         Some(p) => Ok(p.to_str().unwrap().to_owned()),
         None => Ok(Self::default_eggs_file()),
      }
   }

   pub fn nest_file_path(&self) -> Result<String, BirdError> {
      match &self.nest_file {
         Some(p) => Ok(p.to_str().unwrap().to_owned()),
         None => Ok(Self::default_nest_file()),
      }
   }
}
